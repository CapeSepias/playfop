@import Main._

@sect{PlayFOP User Guide}

  @p
    PlayFOP is a library for generating PDFs, images, and other types of output in @lnk("Play Framework", "https://www.playframework.com/") applications.
    PlayFOP accepts XSL-FO that an application has generated via a Play @lnk("Twirl", "https://www.playframework.com/documentation/2.5.x/ScalaTemplates") template and processes it with @lnk("Apache FOP", "https://xmlgraphics.apache.org/fop/").

  @sect{Overview}

    @p
      PlayFOP offers:
    @ul
      @li
        A concise invocation syntax. Go from XSL-FO to finished output with a single method call.
      @li
        [Transparent caching] of expensive Apache FOP objects.
      @li
        Easy incorporation of graphics from your application.
      @li
        Formatters for working with Apache FOP units, and for preserving whitespace in output.
    @p
      PlayFOP supports Play applications written in Scala or Java.

    @p
      [TODO To what extent to link to: source on GitHub; live sample application?]

    @sect{Package Structure}

      @p
        PlayFOP's public API is divided into three packages.
        For a given application, package @code{com.dmanchester.playfop.api} is relevant, as well as either @code{com.dmanchester.playfop.sapi} or @code{com.dmanchester.playfop.japi}, depending on the application's language:

      @table
        @tr
          @th{Package} @th{Relevant to Applications in...} @th{Documentation}
        @tr
          @td{com.dmanchester.playfop.api} @td{Scala or Java} @td{[Scaladoc]}
        @tr
          @td{com.dmanchester.playfop.sapi} @td{Scala} @td{[Scaladoc]}
        @tr
          @td{com.dmanchester.playfop.japi} @td{Java} @td{[Javadoc]}

  @sect{Using PlayFOP}

    @p
      To use PlayFOP, add it as a dependency to your application's @code{build.sbt}:

    @code
      libraryDependencies ++= Seq(
        ...,
        TODO Finalize next line
        "com.dmanchester" %% "playfop" % "0.4-SNAPSHOT" from "https://dmanchester.com/foo"
      )

    @sect{Generating PDFs, Images, and Other Output: the PlayFop Object}

      @p
        The @code{PlayFop} object is the core component of PlayFOP.
        With it, you can generate the various kinds of output supported by Apache FOP.

      @p
        Separate versions of the @code{PlayFop} object are available for Scala and Java applications.
        (The Java "object" is technically a class with static methods.)

      @p
        To use the object, import the appropriate one for your application's language:

      @table
        @tr
          @th{Application Language} @th{Package}
        @tr
          @td{Scala} @td{com.dmanchester.playfop.sapi.PlayFop (Scaladoc TODO LINK)}
        @tr
          @td{Java} @td{com.dmanchester.playfop.japi.PlayFop (Javadoc TODO LINK)}

      @p
        Then, at the point in your code where you wish to generate output, invoke the @code{process} method.
        The method will return the output as a byte array, which can be returned in an HTTP response, saved to a file, etc.

      @p
        The simplest @code{process} invocation involves two arguments: the XSL-FO output of a Twirl XML template; and an output format/MIME type, typically sourced from @code{org.apache.xmlgraphics.util.MimeConstants}.
        For example, given @code{someTemplate.scala.xml}...

      @hl.xml
        @@(text: String)<?xml version='1.0' encoding='utf-8'?>
        <fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
          <fo:layout-master-set>
            <fo:simple-page-master master-name="label">
              <fo:region-body region-name="xsl-region-body"/>
            </fo:simple-page-master>
          </fo:layout-master-set>
          <fo:page-sequence master-reference="label">
            <fo:flow flow-name="xsl-region-body">
              <fo:block font-size="120pt">@@text</fo:block>
            </fo:flow>
          </fo:page-sequence>
        </fo:root>

      @p
        ...you could generate a PNG image as follows:

      @p
        @b{Simple @code{process} Example, Scala}
        @hl.ref(
          wd/'src/'test/'scala/'com/'dmanchester/'playfop/'sapi/'userguide/"UserGuideCodeSamplesSpec.scala",
          start = "val png: Array[Byte] = PlayFop.process(",
          end = "// END Simple Scala 'process' sample")

      @p
        @b{Simple @code{process} Example, Java}
        @hl.ref(
          wd/'src/'test/'java/'com/'dmanchester/'playfop/'japi/'userguide/"UserGuideCodeSamplesTest.java",
          start = "byte[] png = PlayFop.process(",
          end = "// END Simple Java 'process' sample")

      @p
        The resulting PNG (Scala or Java):

      @img(src:="simple-process-example--png.png", style:="border:1px solid #777;")

      @p
        You can also pass to @code{process} either or both of the following options:

        @ul
          @li
            @code{autoDetectFontsForPDF}: Whether, when creating PDF files, Apache FOP should automatically detect operating system fonts (and make them available for PDF files).
          @li
            @code{FOUserAgent} block: A block of code that modifies the @code{FOUserAgent} that Apache FOP will use.
            Useful for setting a PDF file's subject, author, etc.

      @p
        In Scala applications, you typically supply these options as named arguments.
        The @code{FOUserAgent} block is an @code{FOUserAgent}-accepting function.

      @p
        In Java applications, you supply these items via a builder.
        The @code{FOUserAgent} block is an implementation of the single-method @code{FOUserAgentBlock} interface.

      @p
        The following code examples present the syntax for using @code{autoDetectFontsForPDF} and the @code{FOUserAgent} block.

      @p
        @b{Complex @code{process} Example, Scala}
        @hl.ref(
          wd/'src/'test/'scala/'com/'dmanchester/'playfop/'sapi/'userguide/"UserGuideCodeSamplesSpec.scala",
          start = "val foUserAgentBlock = { foUserAgent: FOUserAgent =>",
          end = "// END Complex Scala 'process' sample")

      @p
        @b{Complex @code{process} Example, Java}
        @hl.ref(
          wd/'src/'test/'java/'com/'dmanchester/'playfop/'japi/'userguide/"UserGuideCodeSamplesTest.java",
          start = "FOUserAgentBlock foUserAgentBlock = new FOUserAgentBlock() {",
          end = "// END Complex Java 'process' sample")

      @p
        The resulting PDF (Scala or Java):

      @img(src:="complex-process-example--pdf.png")

    @sect{Applying Apache FOP Units to Values: the Units Class}

      @p
        To apply a numeric value to an XSL-FO element, you generally place the value in an attribute of the element. The value is labeled with the unit of measure (if any), without any intervening space: @code{29.7cm}, @code{9pt}, etc.

      @p
        PlayFOP's @code{Units} class, which is typically used inside a Twirl template, handles this formatting. To use it:

      @ol
        @li
          Create an instance for the desired unit of measure, passing the label and the precision (the number of decimal places to display when formatting a value).

        @li
          Call the instance's @code{format} method, passing the value to be formatted.

      @p
        @b{@code{Units} Example, Inside a Template}

      @hl.xml
        ...beginning of a template that accepts a fontSizeInPoints argument...

        @@import com.dmanchester.playfop.api.Units
        @@pt = @@{new Units("pt", 0)}

        <fo:block-container font-size="@@pt.format(fontSizeInPoints)" ... >

        ...rest of template...

      @p
        @code{Units} instances are thread-safe and may be used across multiple threads.

    @sect{Preserving Whitespace: the Formatters}

      @p
        As XSL-FO is an XML dialect, Apache FOP ignores some kinds of whitespace when processing XSL-FO documents.
        In particular:

      @ul
        @li
          Multiple space characters are collapsed into a single space.

        @li
          Newlines are ignored.

      @p
        PlayFOP's @code{Formatters} object offers methods for preserving both kinds of whitespace.

      @p
        The @code{makeSpacesNonBreaking} method replaces "regular" spaces with no-break ones.
        (No-break spaces are not subject to collapsing.)

      @p
        The @code{makeNewlinesIntoFOBlocks} method takes newline-terminated runs of characters and wraps each one in an @code{<fo:block>} element.
        With the characters wrapped in this fashion, the newlines are preserved in output.

      @p
        Both methods accept a @code{String} argument.
        @code{makeSpacesNonBreaking} returns a @code{String}, while @code{makeNewlinesIntoFOBlocks} returns a a Play Twirl @code{Xml} instance.
        So, if you want both kinds of whitespace preservation, invoke @code{makeSpacesNonBreaking} first and pass its return value to @code{makeNewlinesIntoFOBlocks}.

      @p
        @b{@code{Formatters} Example}

      @p
        Passing the string @code{"H  e  l  l  o\n\n  w  o  r  l  d"} to the following template...

      @hl.xml
        @@(text: String)<?xml version='1.0' encoding='utf-8'?>

        @@import com.dmanchester.playfop.api.Formatters

        <fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
          <fo:layout-master-set>
            <fo:simple-page-master master-name="label">
              <fo:region-body region-name="xsl-region-body"/>
            </fo:simple-page-master>
          </fo:layout-master-set>
          <fo:page-sequence master-reference="label">
            <fo:flow flow-name="xsl-region-body">
              <fo:block font-family="Courier" font-size="24pt">@@Formatters.makeNewlinesIntoFOBlocks(Formatters.makeSpacesNonBreaking(text))</fo:block>
            </fo:flow>
          </fo:page-sequence>
        </fo:root>

      @p
        ...and rendering the result as a PDF leads to:

      @img(src:="formatters-example--pdf.png", style:="border:1px solid #777;")

    @sect{Logging}

      @p
        You can configure logging for PlayFOP and Apache FOP via your @code{application.conf}.
        PlayFOP logs to the @code{com.dmanchester.playfop} package; Apache FOP, to the @code{org.apache.fop} and @code{logger.org.apache.xmlgraphics} packages.
        So, your logging configuration could be:

      @pre
        @code
          logger.com.dmanchester.playfop=INFO
          logger.org.apache.fop=ERROR
          logger.org.apache.xmlgraphics=ERROR

  @sect{Developing PlayFOP}

    @p
      PlayFOP is built with @lnk("sbt", "http://www.scala-sbt.org/").
      It includes a full suite of tests (@lnk("specs2", "http://etorreborre.github.io/specs2/") for Scala code, @lnk("JUnit", "http://junit.org/") for Java code).

    @p
      When you're drafting changes to PlayFOP, you'll likely make use of the following @code{sbt} commands:

    @table(`class`:="pure-table pure-table-bordered")
      @thead
        @tr
          @th{Command}
          @th{Description}
      @tbody
        @tr
          @td
            @code{clean}
          @td
            Deletes previous compilation results.
        @tr
          @td
            @code{compile}
          @td
            Compiles the source code.
        @tr
          @td
            @code{test}
          @td
            Runs the tests.
        @tr
          @td
            @code{publishLocal}
          @td
            Compiles the source code and places the resulting JAR and POM file in your local Ivy repository.
            @br{} @br{}
            When drafting changes, you'll likely want to publish @lnk("snapshot", "http://stackoverflow.com/questions/5901378/what-exactly-is-a-maven-snapshot-and-why-do-we-need-it") versions by relying on a snapshot version number in @code{build.sbt} (e.g., "1.0-SNAPSHOT").
            Doing so will ensure the JAR and POM are not undesirably cached by applications that use them.
        @tr
          @td
            @code{scaladoc/doc}
          @td
            Generates the PlayFOP Scaladoc and places it at @code{library/target-scaladoc/scala-2.11/api/index.html}.
        @tr
          @td
            @code{javadoc/doc}
          @td
            Generates the PlayFOP Javadoc and places it at @code{library/target-javadoc/scala-2.11/api/index.html}.
        @tr
          @td
            @code{userguide/run}
          @td
            Generates the user guide and places it at @code{library/userguide/target/scalatex/index.html}.
            @br{} @br{}
            If you add the @code{--validate} option, links in the guide will be validated when it is generated.

    @p
      When your changes are final, you'll want to change to a non-snapshot version in @code{build.sbt} and execute the following commands:

    @table(`class`:="pure-table pure-table-bordered")
      @thead
        @tr
          @th{Command}
          @th{Description}
      @tbody
        @tr
          @td
            @code{cleanAll}
          @td
            Deletes the @code{library/dist} directory, as well as previous compilation results, previously generated Scaladoc and Javadoc, and the previously generated user's guide (if applicable).
        @tr
          @td
            @code{publishAll}
          @td
            Publishes to the @code{library/dist} directory a full set of PlayFOP artifacts:
            @ul
              @li{the PlayFOP JAR and POM}
              @li{JARs of the Scaladoc and Javadoc}
              @li{a ZIP of the user guide}
              @li{a JAR of the source code}