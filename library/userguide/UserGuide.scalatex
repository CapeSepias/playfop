@import Main._

@val version = "1.0-SNAPSHOT"
@val playFopUrl = "https://www.dmanchester.com/playfop"
@val versionedPlayFopUrl = playFopUrl + "/" + version
@val scaladocUrl = versionedPlayFopUrl + "/scaladoc/com/dmanchester/playfop/api/index.html"
@val javadocUrl = versionedPlayFopUrl + "/javadoc/index.html"

@sect{PlayFOP User Guide}

  @p
    PlayFOP is a library for generating PDFs, images, and other types of output in @lnk("Play Framework", "https://www.playframework.com/") applications.
    PlayFOP accepts XSL-FO that an application has generated via a Play @lnk("Twirl", "https://www.playframework.com/documentation/2.6.x/ScalaTemplates") template, with the @code{@lnk("scala-xml", "https://github.com/scala/scala-xml")} library, or as a @code{String} and processes it with Apache FOP.

  @p
    For information on PlayFOP beyond this user guide, see its @lnk("homepage", playFopUrl).

  @p
    @i
      This guide applies to PlayFOP @b{@version}.

  @sect{Package Structure}

    @p
      PlayFOP's public API is divided into three packages.
      For a given application, package @code{com.dmanchester.playfop.api} is relevant, as well as either @code{com.dmanchester.playfop.sapi} or @code{com.dmanchester.playfop.japi}, depending on the application's language:

    @table(`class`:="pure-table pure-table-bordered")
      @thead
        @tr
          @th{Package}
          @th{Relevant to Applications in...}
          @th{Documentation}
      @tbody
        @tr
          @td{@code{com.dmanchester.playfop.api}}
          @td{Scala or Java}
          @td{@lnk("Scaladoc", scaladocUrl)}
        @tr
          @td{@code{com.dmanchester.playfop.sapi}}
          @td{Scala}
          @td{@lnk("Scaladoc", scaladocUrl)}
        @tr
          @td{@code{com.dmanchester.playfop.japi}}
          @td{Java}
          @td{@lnk("Javadoc", javadocUrl)}

  @sect{Using PlayFOP}

    @p
      PlayFOP is available in @lnk("Maven Central/the Central Repository", "https://search.maven.org/").
      To use it, add PlayFOP as a dependency to your application's @code{build.sbt}:

    @code
      libraryDependencies ++= Seq(@br
        ...,@br
        "com.dmanchester" %% "playfop" % "@version"@br
      )

    @p
      Then, inject a @code{PlayFop} object that is appropriate for your application's language.

    @sect{Injecting a PlayFop Object into a Scala Application}

      @p
        In your @code{application.conf}, add:

      @code
        play.modules.enabled += "com.dmanchester.playfop.sapi.PlayFopModule"

      @p
        Then, inject a @code{PlayFop} object into your controller.
        More specifically, and assuming you're using constructor injection, add a @code{PlayFop} class parameter (package @code{com.dmanchester.playfop.sapi}),
        and if you aren't already using the @code{@@Inject} annotation (package @code{javax.inject}), apply it, too.

      @b{Scala Constructor Injection Example, Play 2.6}

      @hl.scala
        class MyController @@Inject() (cc: ControllerComponents, val playFop: PlayFop)
            extends AbstractController(cc) {
          ...

      @b{Scala Constructor Injection Example, Play 2.4 and Play 2.5}

      @hl.scala
        class MyController @@Inject() (val playFop: PlayFop) extends Controller {
          ...

    @sect{Injecting a PlayFop Object into a Java Application}

      @p
        In your @code{application.conf}, add:

      @code
        play.modules.enabled += "com.dmanchester.playfop.japi.PlayFopModule"

      @p
        Then, inject a @code{PlayFop} instance into your controller.
        More specifically, and assuming you're using constructor injection, add a @code{PlayFop} field (package @code{com.dmanchester.playfop.japi}).
        Add a constructor parameter to set it and apply the @code{@@Inject} annotation (package @code{javax.inject}).

      @b{Java Constructor Injection Example}

      @hl.scala
        public class MyController extends Controller {

          private PlayFop playFop;

          @@Inject
          public Application(PlayFop playFop) {
              this.playFop = playFop;
          }

          ...

    @sect{Generating PDFs, Images, and Other Output: Using the PlayFop Object}

      @p
        With the @code{PlayFop} object you inject into your application, you can generate the various kinds of output supported by Apache FOP.

      @p
        At the point in your code where you wish to generate output, invoke one of the @code{PlayFop} object's processing methods: @code{processTwirlXml} or @code{processStringXml}, or @code{processScalaXml} (Scala API only).
        The method will return the output as a byte array, which can be returned in an HTTP response, saved to a file, etc.

      @p
        The simplest processing invocations involve two arguments:

      @ul
        @li
          XSL-FO from a Twirl template, as a @code{scala-xml} @code{Node}, or as a @code{String}; and
        @li
          an output format/MIME type, typically sourced from @code{org.apache.xmlgraphics.util.MimeConstants}.

      @p
        For example, given @code{someTwirlTemplate.scala.xml}...

      @hl.xml
        @@(text: String)<?xml version='1.0' encoding='utf-8'?>
        <fo:root xmlns:fo="http://www.w3.org/1999/XSL/Format">
          <fo:layout-master-set>
            <fo:simple-page-master master-name="label">
              <fo:region-body region-name="xsl-region-body"/>
            </fo:simple-page-master>
          </fo:layout-master-set>
          <fo:page-sequence master-reference="label">
            <fo:flow flow-name="xsl-region-body">
              <fo:block font-size="120pt">@@text</fo:block>
            </fo:flow>
          </fo:page-sequence>
        </fo:root>

      @p
        ...you could generate a PNG image as follows:

      @p
        @b{Simple Processing Example, Twirl Template, Scala}
        @hl.ref(
          wd/'src/'test/'scala/'com/'dmanchester/'playfop/'sapi/'userguide/"UserGuideCodeSamplesSpec.scala",
          start = "val png: Array[Byte] = playFop.processTwirlXml(",
          end = "// END Simple Scala processing sample")

      @p
        @b{Simple Processing Example, Twirl Template, Java}
        @hl.ref(
          wd/'src/'test/'java/'com/'dmanchester/'playfop/'japi/'userguide/"UserGuideCodeSamplesTest.java",
          start = "byte[] png = playFop.processTwirlXml(",
          end = "// END Simple Java processing sample")

      @p
        The resulting PNG (Scala or Java):

      @img(src:="simple-processing-example--png.png", style:="border:1px solid #777;")

      @p
        You can also pass to @code{process} either or both of the following options:

        @ul
          @li
            @code{autoDetectFontsForPDF}: Whether, when creating PDF files, Apache FOP should automatically detect operating system fonts (and make them available for PDF files).
          @li
            an @code{FOUserAgent} block: A block of code that modifies the @code{FOUserAgent} that Apache FOP will use.
            Useful for setting a PDF file's subject, author, etc.

      @p
        In Scala applications, you typically supply these options as named arguments.
        The @code{FOUserAgent} block is an @code{FOUserAgent}-accepting function.

      @p
        In Java applications, you supply these items via a builder.
        The @code{FOUserAgent} block is an implementation of the single-method @code{FOUserAgentBlock} interface.

      @p
        The following code samples present the syntax for using @code{autoDetectFontsForPDF} and an @code{FOUserAgent} block.
        They presume a @code{String} literal @code{"xslfo"}, equivalent to the above Twirl template rendered with the text, "Hello again."

      @p
        @b{Complex Processing Example, String Literal, Scala}
        @hl.ref(
          wd/'src/'test/'scala/'com/'dmanchester/'playfop/'sapi/'userguide/"UserGuideCodeSamplesSpec.scala",
          start = "val myFOUserAgentBlock = { foUserAgent: FOUserAgent =>",
          end = "// END Complex Scala processing sample")

      @p
        @b{Complex Processing Example, String Literal, Java}
        @hl.ref(
          wd/'src/'test/'java/'com/'dmanchester/'playfop/'japi/'userguide/"UserGuideCodeSamplesTest.java",
          start = "FOUserAgentBlock myFOUserAgentBlock = new FOUserAgentBlock() {",
          end = "// END Complex Java processing sample")

      @p
        The resulting PDF (Scala or Java):

      @img(src:="complex-processing-example--pdf.png")

    @sect{Applying Apache FOP Units to Values: the Units Class}

      @p
        To apply a numeric value to an XSL-FO element, you generally place the value in an attribute of the element. The value is labeled with the unit of measure (if any), without any intervening space: @code{29.7cm}, @code{9pt}, etc.

      @p
        PlayFOP's @code{Units} class handles this formatting. To use it:

      @ol
        @li
          Create an instance for the desired unit of measure, passing the label and the precision (the number of decimal places to display when formatting a value).

        @li
          Call the instance's @code{format} method, passing the value to be formatted.

      @p
        @b{@code{Units} Example, Inside a Twirl Template}

      @hl.xml
        ...beginning of a Twirl template that accepts a fontSizeInPoints argument...

        @@import com.dmanchester.playfop.api.Units
        @@pt = @@{new Units("pt", 0)}

        <fo:block-container font-size="@@pt.format(fontSizeInPoints)" ... >

        ...rest of template...

      @p
        @code{Units} instances are thread-safe.

    @sect{Preserving Whitespace: the Formatters}

      @p
        As XSL-FO is an XML dialect, Apache FOP ignores some kinds of whitespace when processing XSL-FO documents.
        In particular:

      @ul
        @li
          Multiple space characters are collapsed into a single space.

        @li
          Newlines are ignored.

      @p
        PlayFOP's @code{Formatters} object offers methods for preserving both kinds of whitespace.

      @p
        The @code{preserveSpaces} method replaces "regular" spaces with no-break ones.
        (No-break spaces are not subject to collapsing.)

      @p
        The newline-preservation methods (@code{preserveNewlinesForTwirlXml}, @code{preserveNewlinesForScalaXml}, and @code{preserveNewlinesForStringXml}) take newline-terminated runs of characters and wrap each one in an @code{<fo:block>} element.
        With the characters wrapped in this fashion, the newlines are preserved in output.

      @p
        All @code{Formatters} methods accept a @code{String} argument.
        @code{preserveSpaces} returns a @code{String}, while the newline-preservation methods return an object of the type suggested by the method name:

      @table(`class`:="pure-table pure-table-bordered")
        @thead
          @tr
            @th{Method}
            @th{Returns}
        @tbody
          @tr
            @td
              @code{preserveNewlinesForTwirlXml}
            @td
              a Twirl @code{Xml} instance
          @tr
            @td
              @code{preserveNewlinesForScalaXml}
            @td
              a @code{scala-xml} @code{Seq[Node]}
          @tr
            @td
              @code{preserveNewlinesForStringXml}
            @td
              a @code{String}

      @p
        So, if you want both kinds of whitespace preservation, invoke @code{preserveSpaces} first and pass its return value to a newline-preservation method.

      @p
        @b{@code{Formatters} Example}

      @p
        Invoking the following code block with @code{text} set to the string @code{"H  e  l  l  o\n\n  w  o  r  l  d"}...

      @p
        @hl.ref(
          wd/'src/'test/'scala/'com/'dmanchester/'playfop/'sapi/'userguide/"UserGuideCodeSamplesSpec.scala",
          start = "import com.dmanchester.playfop.api.Formatters",
          end = "// END Formatters sample")

      @p
        ...and rendering @code{xslfo} as a PDF leads to:

      @img(src:="formatters-example--pdf.png", style:="border:1px solid #777;")

    @sect{Logging}

      @p
        You can configure logging for PlayFOP and Apache FOP via your @code{logback.xml} file.
        PlayFOP logs to the @code{com.dmanchester.playfop} logger; Apache FOP, to the @code{org.apache.fop} and @code{org.apache.xmlgraphics} loggers.
        So, your logging configuration might include:

      @hl.xml
        <logger name="com.dmanchester.playfop" level="INFO" />
        <logger name="org.apache.fop" level="ERROR" />
        <logger name="org.apache.xmlgraphics" level="ERROR" />

    @sect{Thread Safety}

      @p
        PlayFOP seeks to provide thread safety everywhere it makes sense to do so, and classes' status is documented in the Scaladoc and Javadoc.
        However, there is an open question around the thread safety of Apache FOP itself.
        The Apache FOP documentation has long @lnk("included", "https://xmlgraphics.apache.org/fop/2.2/embedding.html#multithreading") the following statement:

      @p
        "Apache FOP may currently not be completely thread safe.
        The code has not been fully tested for multi-threading issues, yet.
        If you encounter any suspicious behaviour, please notify us."

      @p
        Reviews of the @lnk("Apache FOP issue tracker", "https://issues.apache.org/jira/projects/FOP") and the @lnk("\"FOP Users\" mailing list", "http://apache-fop.1065347.n5.nabble.com/FOP-Users-f3.html")
        do not turn up recent trouble reports around multi-threaded Apache FOP use, and @lnk("this thread", "http://apache-fop.1065347.n5.nabble.com/Multi-Threaded-FOP-td9615.html") mentions good experiences.

      @p
        PlayFOP therefore takes a pragmatic approach: @b{If an application uses PlayFOP in a multi-threaded fashion, PlayFOP's use of Apache FOP is multi-threaded as well.}

      @p
        If PlayFOP's multi-threading of Apache FOP causes problems for your application, synchronizing your access to your @code{PlayFop} object should resolve them.
        Please also comment on the related @lnk("placeholder issue", "https://github.com/dmanchester/playfop/issues/14") with details of the problems you've encountered.

  @sect{Developing PlayFOP}

    @p
      PlayFOP is built with @lnk("sbt", "http://www.scala-sbt.org/").
      It includes a full suite of tests (@lnk("specs2", "http://etorreborre.github.io/specs2/") for Scala code, @lnk("JUnit", "http://junit.org/") for Java code).

    @p
      With sbt's @lnk("cross-building", "http://www.scala-sbt.org/0.13/docs/Cross-Build.html") support, PlayFOP can target Scala 2.11 and 2.12.

    @p
      To begin developing changes to PlayFOP, update @code{build.sbt} with a "@code{...-@lnk("SNAPSHOT", "http://stackoverflow.com/questions/5901378/what-exactly-is-a-maven-snapshot-and-why-do-we-need-it")}" version number.
      (Doing so will ensure locally published JARs and POMs are not undesirably cached by applications that use them.)
      Update the version number in @code{UserGuide.scalatex} as well.

    @p
      As you develop your changes, you'll likely make use of a combination of the @code{sbt} commands in the table below.
      By default, commands target Scala 2.12.
      To target both Scala 2.11 and 2.12, prefix a command with "@code{+}".

    @table(`class`:="pure-table pure-table-bordered")
      @thead
        @tr
          @th{Command}
          @th{Description}
      @tbody
        @tr
          @td
            @code{clean}
          @td
            Deletes previous compilation results.
        @tr
          @td
            @code{compile}
          @td
            Compiles the source code.
        @tr
          @td
            @code{test}
          @td
            Runs the tests.
        @tr
          @td
            @code{publishLocal}
          @td
            Compiles the source code and places the resulting JAR and POM file in your local Ivy repository.
        @tr
          @td
            @code{scaladocOnly/doc}
          @td
            Generates the PlayFOP Scaladoc and places it at @code{library/target-scaladoc/scala-2.12/api/index.html}.
        @tr
          @td
            @code{javadocOnly/doc}
          @td
            Generates the PlayFOP Javadoc and places it at @code{library/target-javadoc/scala-2.12/api/index.html}.
        @tr
          @td
            @code{userguide/run}
          @td
            Generates the user guide and places it at @code{library/userguide/target/scalatex/index.html}.

    @p
      When your changes are final and you wish to obtain a distribution, change to a non-snapshot version number in @code{build.sbt} and @code{UserGuide.scalatex} and execute the commands in the table below.
      (Cross-building for Scala 2.11 and 2.12 with "@code{+}" is essential for a complete distribution.)

    @table(`class`:="pure-table pure-table-bordered")
      @thead
        @tr
          @th{Command}
          @th{Description}
      @tbody
        @tr
          @td
            @code{+cleanAll}
          @td
            Deletes the @code{library/dist_...} directories, as well as previous compilation results, previously generated Scaladoc and Javadoc, and the previously generated user guide (if applicable).
        @tr
          @td
            @code{+publishAll}
          @td
            Publishes to each of the @code{library/dist_...} directories a full set of PlayFOP artifacts:
            @ul
              @li{the PlayFOP JAR and POM}
              @li{JARs of the Scaladoc and Javadoc}
              @li{a ZIP of the user guide}
              @li{a JAR of the source code}
